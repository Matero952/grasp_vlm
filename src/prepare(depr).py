import os
from PIL import Image
import re

'''THIS FILE IS FOR ADDING TO THE DATASET AND ORGANIZING BY GROUP. YOU DONT ACTUALLY NEED THIS FILE UNLESS YOU WANT TO ORGANIZE DATA In RAW DATA.'''
def generate_img_path_list(parent_dir: str) -> list:
    '''Generates img path list given a parent directory. This img path list will contain
        all of the images/files in the subdirectories of parent_dir.\n
        Returns a list of the paths.'''
    paths = []
    #initialize list to hold paths for the images to convert to jpg
    for root, dirs, files in os.walk(parent_dir):
        for file in files:
            paths.append(os.path.join(root, file))
            #append all image paths to path list
    print(paths)
    return paths
    #return list of all the paths

def rename(path_list, output_dir) -> None:
    '''Renames image files in a directory to this format: {object}_{counter}.jpg.\n
        path_list = path list generated by generate_img_path_list\n
        output_dir = where you want all of the renamed objects to be located.\n
        Returns None\n
        You can do it as many times with the same output dir name,
        just do not change output dir names.'''
    #renames images to the same naming format. you can do it as many times with the same output dir name,
    #just do not change output dir names.
    counter = 0
    #initialize counter for naming format "{object}_{counter}"
    for path in path_list:
        #iterate through generated paths
        ds_object = re.search(r"drill|wacker|glue|saw|nail|screwdriver|wrench|solder|allen|hammer", path)
        #look for objects in the dataset for the naming format
        if ds_object:
            #if the object is in the name
            img = Image.open(path)
            parent_dir = os.path.dirname(path)
            if os.path.basename(parent_dir) != output_dir:
                #checks to see if renaming has already been done
                new_dir = os.path.join(parent_dir, output_dir)
                os.makedirs(new_dir, exist_ok=True)
                #wont do anything if the directory already exists
                new_path = os.path.join(new_dir, f"{ds_object.group(0)}_{counter}.jpg")
                #make new path with the naming convention
                img.save(new_path)
                img.close()
            else:
                continue
        else:
            #if dataset object is not found in name, fix it.
            print("Dataset object not found in image path.")
            print(f"Could not rename: {path}")
            print("Exiting function. Please fix before you continue.")
            break
        counter += 1
        #add to counter
    return None
    #doesnt need to return anything
    
def convert_to_jpg(path_list: list) -> None:
    '''Converts all images in generated path list to .jpg format.
        Doesn't return anything.\n
        After you do this function, please use rename otherwise .jpg data might be stored in a non-.jpg file.'''
    for path in path_list:
        img = Image.open(path)
        img = img.convert('RGB')
        img.save(path, 'JPEG', quality=90)
    return None

if __name__ == "__main__":
    pths = generate_img_path_list('data/raw/wacker')
    convert_to_jpg(pths)
    rename(pths, 'wacker_formatted')

